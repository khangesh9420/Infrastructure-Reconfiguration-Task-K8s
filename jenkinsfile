pipeline {
  agent { label 'k8s-agent' }
  
  environment {
    REGISTRY = "khangeshmatte123"
    BUILD_ID = "${env.BUILD_ID}"
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Login to Docker Hub (Buildah)') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'buildah login -u $DOCKER_USER -p $DOCKER_PASS docker.io'
        }
      }
    }

    stage('Build Images with Buildah') {
      steps {
        sh '''
          buildah bud -t docker.io/$REGISTRY/book-service:$BUILD_ID book-service
          buildah bud -t docker.io/$REGISTRY/user-service:$BUILD_ID user-service
        '''
      }
    }

    stage('Test') {
      environment {
        SONAR_HOST_URL = 'http://sonarqube.local'  // Update to match your ingress URL
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
          sh '''
            echo 'Running static code analysis using SonarQube with Buildah'
            
            # Create the container and mount its filesystem (don't pull the image again)
            container_name=sonar-scanner-container
            buildah from --name $container_name docker.io/sonarsource/sonar-scanner-cli
            
            # Use buildah unshare to gain privileges for mounting
            buildah unshare bash -c "
              # Mount the container to interact with its filesystem
              container_mount_path=\$(buildah mount $container_name)
              
              # Verify the mount path
              echo 'Container mounted at: \$container_mount_path'

              # Ensure the directory exists in the container and has proper permissions
              mkdir -p \$container_mount_path/usr/src/app
              chown -R jenkins:jenkins \$container_mount_path/usr/src/app
              
              # Copy the workspace files into the container
              echo 'Copying workspace files to the container mount path'
              cp -r /home/jenkins/agent/workspace/book-service \$container_mount_path/usr/src/app
              
              # Verify files have been copied
              ls -al \$container_mount_path/usr/src/app
              
              # Set the SonarQube scanner user home directory to a writable location
              export SONAR_USER_HOME=/home/jenkins/.sonar

              # Run SonarQube analysis inside the container
              echo 'Running SonarQube analysis...'
              sonar-scanner \
                -Dsonar.projectKey=book-service \
                -Dsonar.sources=. \
                -Dsonar.host.url=$SONAR_HOST_URL \
                -Dsonar.login=$SONAR_TOKEN
            "
          '''
        }
      }
    }

    stage('Push Images with Buildah') {
      steps {
        sh '''
          buildah push docker.io/$REGISTRY/book-service:$BUILD_ID
          buildah push docker.io/$REGISTRY/user-service:$BUILD_ID
        '''
      }
    }

    stage('Update Manifests & Push to Git') {
      environment {
        GIT_REPO_NAME = "Infrastructure-Reconfiguration-Task-K8s"
        GIT_USER_NAME = "khangesh9420"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            chmod +x update-images.sh
            ./update-images.sh

            git config --global user.name "khangesh9420"
            git config --global user.email "khangeshmatte@gmail.com"

            # Determine current branch or fallback
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [ "$CURRENT_BRANCH" = "HEAD" ] || [ -z "$CURRENT_BRANCH" ]; then
              CURRENT_BRANCH="main"
              git checkout $CURRENT_BRANCH
            fi

            echo "On branch: $CURRENT_BRANCH"

            git add k8s_manifest/book-deployment.yaml k8s_manifest/user-deployment.yaml

            if ! git diff --cached --quiet; then
              git commit -m "ci: update image tags to $BUILD_ID"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git $CURRENT_BRANCH
            else
              echo "No changes to commit"
            fi
          '''
        }
      }
    }
  }
}
