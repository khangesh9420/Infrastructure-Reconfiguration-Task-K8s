pipeline {
  agent { label 'k8s-agent' }

  environment {
    REGISTRY = "khangeshmatte123"
    BUILD_ID = "${env.BUILD_ID}"
    SONAR_HOST_URL = 'http://108.142.232.37:9000'
    GIT_REPO_NAME = "Infrastructure_manifest_K8"
    GIT_USER_NAME = "khangesh9420"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Detect Changes') {
      steps {
        script {
           def changedFiles = sh(script: "git diff --name-only HEAD~1", returnStdout: true).trim()
           echo "Changed files:\n${changedFiles}"
           env.CHANGED_BOOK = changedFiles.contains("book-service/")
           env.CHANGED_USER = changedFiles.contains("user-service/")
        }
      }
    }

    stage('Login to Docker Hub (Buildah)') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'buildah login -u $DOCKER_USER -p $DOCKER_PASS docker.io'
        }
      }
    }

    stage('Build Images with Buildah') {
      steps {
        script {
          if (env.CHANGED_BOOK == 'true') {
            sh "buildah bud -t docker.io/$REGISTRY/book-service:$BUILD_ID book-service"
          }
          if (env.CHANGED_USER == 'true') {
            sh "buildah bud -t docker.io/$REGISTRY/user-service:$BUILD_ID user-service"
          }
        }
      }
    }

    stage('SonarQube Scan') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
          sh '''
            echo "Running SonarQube analysis"

            buildah from --name sonar-cli docker.io/sonarsource/sonar-scanner-cli

            buildah unshare bash -c '
              mount_path=$(buildah mount sonar-cli)
              cp -r . $mount_path/usr/src

              cat <<EOF > $mount_path/usr/src/sonar-project.properties
sonar.projectKey=infrastructure-repo
sonar.sources=book-service,user-service
sonar.host.url=$SONAR_HOST_URL
sonar.login=$SONAR_TOKEN
EOF

              buildah run sonar-cli sonar-scanner -Dproject.settings=/usr/src/sonar-project.properties
            '

            buildah rm sonar-cli
          '''
        }
      }
    }

    stage('Push Images with Buildah') {
      steps {
        script {
          if (env.CHANGED_BOOK == 'true') {
            sh "buildah push docker.io/$REGISTRY/book-service:$BUILD_ID"
          }
          if (env.CHANGED_USER == 'true') {
            sh "buildah push docker.io/$REGISTRY/user-service:$BUILD_ID"
          }
        }
      }
    }

    stage('Update Manifests & Push to Git') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            sh '''
              set -e
              rm -rf $GIT_REPO_NAME
              git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git

              chmod +x update-images.sh
              BUILD_ID=$BUILD_ID ./update-images.sh $GIT_REPO_NAME

              cd $GIT_REPO_NAME

              git config user.name "$GIT_USER_NAME"
              git config user.email "khangeshmatte@gmail.com"

              CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD || echo "main")
              git checkout $CURRENT_BRANCH || git checkout -b $CURRENT_BRANCH

              # Conditionally add only the updated manifests
              if [ "$CHANGED_BOOK" = "true" ]; then
                git add k8s_manifest/book-deployment.yaml
              fi

              if [ "$CHANGED_USER" = "true" ]; then
                git add k8s_manifest/user-deployment.yaml
              fi

              if ! git diff --cached --quiet; then
                git commit -m "ci: update image tags to $BUILD_ID"
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git $CURRENT_BRANCH
              else
                echo "No changes to commit"
              fi
            '''
          }
        }
      }
    }
  }
}
